// Font size in rem, stated in px (pixelrem will post-process the px fallback)
@mixin font-size($sizeValue) {
	font-size: $sizeValue + px;
	font-size: ($sizeValue / 16) + rem;
}

// Opacity with IE fallback
@mixin opacity($trans) {
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
	filter: unquote("alpha(opacity=#{$trans * 100})");
	opacity: $trans;
}

// Breakpoints
@mixin bp($point) {
	$bp-mobile: "(max-width:" + (320 / 16) + "em)";
	$bp-medium: "(min-width:" + (760 / 16) + "em)";
	$bp-large: "(min-width:" + (865 / 16) + "em)";
	$bp-larger: "(min-width:" + (1100 / 16) + "em)";
	$bp-largest: "(min-width:" + (1200 / 16) + "em)";

	@if $point == mobile {
		@media only screen and #{$bp-mobile} { @content; }
	}
	@else if $point == medium {
		@media only screen and #{$bp-medium} { @content; }
	}
	@else if $point == large {
		@media only screen and #{$bp-large} { @content; }
	}
	@else if $point == larger {
		@media only screen and #{$bp-larger} { @content; }
	}
	@else if $point == largest {
		@media only screen and #{$bp-largest}  { @content; }
	}
}

//=======================================================================================
// rem function, accepts px returns rem (Px fallback handled by pixrem)
// e.g. @include rem(width, 32px 8px 0 16px); = width: 2rem .5rem 0 1rem;
// e.g. @include rem(height, 16px); = height: 1rem;
//=======================================================================================
@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px : ();
	$rem: ();

	@each $value in $values {
		@if $value == 0 or $value == auto
		{
			$px : append($px, $value);
			$rem: append($rem, $value);
		}
		@else
		{
			$val: parseInt($value);

			$px : append($px, $value);
			$rem: append($rem, ($val / 16 + rem));
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}

//=======================================================================================
//  alpha-me() (renamed to rgba-fb() by me) — by @cballenar — January 4th, 2014
//=======================================================================================
// A SCSS mixin to create RGB fallbacks for RGBa styles.

// ## How to
// This mixin takes up to 4 arguments (minimum of two)

//  - $property: the css property to be used,      e.g.: 'border'
//  - $attributes: the additional attributes,      e.g.: '1px solid'
//  - $color: the translucent color to be used,    e.g.: 'rgba(240,20,200,.5)'
//  - $background: color that will be used in mix, e.g.: '#DADADA'

// You're required to enter at least the $property and $color variables, so you end up
// with the following options:
//  - @include rgba-fb($property, $color);
//  - @include rgba-fb($property, $color, $background);
//  - @include rgba-fb($property, $attributes, $color);
//  - @include rgba-fb($property, $attributes, $color, $background);

@mixin rgba-fb($var1, $var2, $var3:null, $var4:null) {

	// Set variables for global use
	$property:   $var1;
	$attributes: null;
	$color:      null;
	$color-bg:   null;

	// Check if $var2 is a color
	@if ( type-of($var2) == color ) {

		// Set default background if not specified
		@if not $var3 { $var3: #FFFFFF; }

		// Update variables
		$color:      $var2;
		$color-bg:   $var3;


	// Otherwise it should be the attributes
	} @else if ( type-of($var2) != color ) {

		// Set default background if not specified
		@if not $var4 { $var4: #FFFFFF; }

		// Update variables
		$attributes: $var2;
		$color:      $var3;
		$color-bg:   $var4;

	}

	// Extract alpha channel from color
	$percent: alpha($color) * 100%;

	// Make color opaque
	$opaque: opacify($color, 1);

	// Blend color with background.
	$color-solid: mix($opaque, $color-bg, $percent);

	// Return built style with solid color and transparent color
	#{$property}: #{$attributes} $color-solid;
	#{$property}: #{$attributes} $color;
}